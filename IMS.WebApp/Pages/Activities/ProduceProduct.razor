@page "/produce"

@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase ValidateEnoughInventoriesForProducingUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
<h3>Ürün Takibi</h3>
<br />
@if (produceViewModel != null)
{
    <EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>


        <div class="form-group">
            <label for="po">Üretim Numarası</label>
            <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="inv">Satın Alınacak Envanter</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct"
                               DisplaySearchResult="true"></ViewProductsComponent>
            <InputText id="inv" class="form-control" @bind-Value="produceViewModel.ProductName" disabled></InputText>
            <input type="hidden" value="@produceViewModel.ProductId" />
            @if (selectedProduct != null)
            {
                <text>Fiyat:</text>
                @selectedProduct?.Price.ToString("c")
            }
        </div>

        <div class="form-group">
            <label for="qty">Adet</label>
            <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Produce</button>
    </EditForm>
}
@code {

    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product selectedProduct;
    private string errorMessage;


    private async Task OnValidSubmit()
    {
        if (!await ValidateEnoughInventoriesForProducingUseCase.ExecuteAsync(this.selectedProduct, this.produceViewModel.QuantityToProduce))
        {
            errorMessage = $"Stoklar bu ürünü üretmek için yeterli değil {this.selectedProduct.ProductName} X {this.produceViewModel.QuantityToProduce} times";
            return;
        }
        else
        {
            errorMessage = string.Empty;
        }

        await ProduceProductUseCase.ExecuteAsync(
             this.produceViewModel.ProductionNumber,
             this.selectedProduct,
             this.produceViewModel.QuantityToProduce,
             "Frank"
         );

        this.produceViewModel = new ProduceViewModel();
        this.selectedProduct = null;
        this.errorMessage = string.Empty;
    }

    public void OnSelectProduct(Product product)
    {
        this.selectedProduct = product;
        produceViewModel.ProductId = product.ProductId;
        produceViewModel.ProductName = product.ProductName;
    }


}